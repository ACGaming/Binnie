buildscript {
    repositories {
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
    }
    dependencies {
        classpath 'com.anatawa12.forge:ForgeGradle:2.3-1.0.8'
    }
}
apply plugin: 'idea'
apply plugin: 'maven'

allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.fork = true
        options.incremental = true
    }
    apply plugin: 'net.minecraftforge.gradle.forge'

    version = version_major + '.' + version_minor + '.' + version_patch
    if (System.getenv("BUILD_NUMBER") != null) {
        version = version + "." + System.getenv("BUILD_NUMBER")
    } else {
        version = version + ".211"
    }

    minecraft {
        version = mcversion + "-" + forgeversion
        mappings = mcp_mappings
        runDir = "run"

        replace '@VERSION@', project.version
    }

    group = "binnie" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
    compileJava {
        sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
    }

    repositories {
        maven {
            name = "jei"
            url = "https://dvs1.progwml6.com/files/maven"
        }
        maven {
            name = "ic2, forestry"
            url = "https://modmaven.dev"
        }
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven"
        }
        maven {
            url = "https://mod-buildcraft.com/maven"
        }
        maven {
            url = "https://maven.blamejared.com"
        }
    }

    dependencies {
        deobfCompile("net.sengir.forestry:forestry_${forestry_mcversion}:${forestry_version}") {
            transitive = false
        }
        deobfProvided "mezz.jei:jei_${jei_mcversion}:${jei_version}:api"
        runtime "mezz.jei:jei_${jei_mcversion}:${jei_version}"
        runtime "jei-bees:jeibees:${jeibees_version}:mc${jeibees_mcversion}"
        deobfProvided "net.industrial-craft:industrialcraft-2:${ic2_version}:api"
        runtime "net.industrial-craft:industrialcraft-2:${ic2_version}"
        deobfProvided "CraftTweaker2:CraftTweaker2-API:${crafttweaker_version}"
        deobfProvided "com.mod-buildcraft:buildcraft-api:${buildcraft_version}"
    }

    processResources {
        // this will ensure that this task is redone when the versions change.
        inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version

        // replace stuff in mcmod.info, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'

            // replace version and mcversion
            expand 'version': project.version, 'mcversion': project.minecraft.version
        }

        // copy everything else, thats not the mcmod.info
        from(sourceSets.main.resources.srcDirs) {
            exclude 'mcmod.info'
        }
    }

    // prevent java 8's strict doclint for javadocs from failing builds
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

def mainProjects = [':core', ':core-api', ':botany', ':botany-api', ':design', ':design-api', ':extrabees', ':extratrees', 'extratrees-api', ':genetics', 'genetics-api']
        .collect { subproject -> project(subproject) }
mainProjects.each { subproject -> evaluationDependsOn(subproject.path) }
jar.dependsOn mainProjects.tasks['classes']
jar {
    mainProjects.each { subproject ->
        from subproject.sourceSets.main.output.classesDirs
        from subproject.sourceSets.api.output.classesDirs
        from subproject.sourceSets.main.output.resourcesDir
        from subproject.sourceSets.api.output.resourcesDir
    }
}

task sourcesJar(type: Jar, dependsOn: mainProjects.tasks['classes']) {
    classifier = 'sources'
    mainProjects.each { subproject ->
        from(subproject.sourceSets.main.allSource) {
            exclude 'assets'
            exclude 'mcmod.info'
        }
        from(subproject.sourceSets.api.allSource)
    }
}

task copyJars(type: Copy) {
    from mainProjects.collect { it.tasks.withType(Jar) }
    into "$buildDir/libs"
}

artifacts {
    archives sourcesJar
}
